module AresMUSH
  module Custom
    class SpellCastCmd
    #spell/cast <spell>
      include CommandHandler
      attr_accessor :name, :weapon_name, :spell, :weapon, :weapon_type
      
      def parse_args
        self.spell = titlecase_arg(cmd.args)      
   
      end

      def handle
        room = enactor.room
        #Reading config file
        spell_list = Global.read_config("spells")
        require_target = Global.read_config("spells", self.spell, "require_target")
        name = Global.read_config("spells", self.spell, "name")
        desc = Global.read_config("spells", self.spell, "desc")
        self.weapon = Global.read_config("spells", self.spell, "weapon")
        weapon_specials = Global.read_config("spells", self.spell, "weapon_specials")
        armor = Global.read_config("spells", self.spell, "armor")
        armor_specials = Global.read_config("spells", self.spell, "armor_specials")
        is_stun = Global.read_config("spells", self.spell, "is_stun")
        roll = Global.read_config("spells", self.spell, "roll")
        school = Global.read_config("spells", self.spell, "school")
        spell_mod = Global.read_config("spells", self.spell, "spell_mod")
        # #Is enactor KO'd?
        # if enactor.combatant.is_ko
          # client.emit_failure "You cannot cast a spell while KO'd."
        # else
          #Does spell exist and does it need a target?        
          if spell_list.include?(spell)
            if require_target == true
              client.emit_failure "You need to identify a target. Do spell/cast <spell>=<target>."
            end
            
            #Equip Weapon
            if weapon != nil
              if enactor.combat
                enactor.combatant.update(weapon_name: weapon)
                weapon_type = FS3Combat.weapon_stat(enactor.combatant.weapon, "weapon_type")
                if armor
                  
                else
                
                FS3Combat.emit_to_combat enactor.combat, t('custom.cast_spell', :name => enactor.name, :spell => self.spell)

                  if weapon_type == "Explosive"
                    FS3Combat.emit_to_combatant enactor.combatant, t('custom.target_aoe')
                  elsif weapon_type == "Supressive"
                    FS3Combat.emit_to_combatant enactor.combatant, t('custom.target_suppress')
                  else
                    FS3Combat.emit_to_combatant enactor.combatant, t('custom.target_attack')
                  end
                  
                end
              else
                client.emit_failure t('custom.not_in_combat')
              end
            end
            #Equip Weapon Specials
            if weapon_specials != nil
              if enactor.combat
                enactor.combatant.update(weapon_specials: weapon_specials)
                FS3Combat.emit_to_combat enactor.combat, t('custom.cast_spell', :name => enactor.name, :spell => self.spell)
                FS3Combat.set_action(client, enactor, enactor.combat, enactor.combatant, FS3Combat::PassAction, "")
              else
                  client.emit_failure t('custom.not_in_combat')
              end
            end       
            
            #Equip Armor
            if armor != nil
              if enactor.combat
                enactor.combatant.update(armor_name: armor)
                FS3Combat.emit_to_combat enactor.combat, t('custom.cast_spell', :name => enactor.name, :spell => self.spell)
                FS3Combat.set_action(client, enactor, enactor.combat, enactor.combatant, FS3Combat::PassAction, "")
              else
                client.emit_failure t('custom.not_in_combat')
              end
            end
            #Equip Armor Specials
            if armor_specials != nil
              if enactor.combat
                enactor.combatant.update(armor_specials: armor_specials)
                FS3Combat.emit_to_combat enactor.combat, t('custom.cast_spell', :name => enactor.name, :spell => self.spell)
                FS3Combat.set_action(client, enactor, enactor.combat, enactor.combatant, FS3Combat::PassAction, "")
              else
                client.emit_failure t('custom.not_in_combat')
              end
            end     
            #Stuns
            if is_stun == true
              if enactor.combat       
                FS3Combat.emit_to_combat enactor.combat, t('custom.cast_spell', :name => enactor.name, :spell => self.spell)
                FS3Combat.emit_to_combatant enactor.combatant, t('custom.target_stun')
              else
                client.emit_failure t('custom.not_in_combat')
              end
            end
                      
            #Roll
            if roll != nil
              if enactor.combat 
                FS3Combat.emit_to_combat enactor.combat, t('custom.cast_spell', :name => enactor.name, :spell => self.spell)
                FS3Combat.set_action(client, enactor, enactor.combat, enactor.combatant, FS3Combat::PassAction, "")
              else
                Rooms.emit_to_room(enactor.room, "#{enactor.name} casts %xg_#{self.spell}_\%xn")
              end              
                if spell_mod
                  roll_str = "#{school} + #{enactor.spell_mod}"
                else 
                  roll_str = "#{school}"
                end
                die_result = FS3Skills.parse_and_roll(client, enactor, roll_str)
                success_level = FS3Skills.get_success_level(die_result)
                success_title = FS3Skills.get_success_title(success_level)
                message = t('fs3skills.simple_roll_result', 
                  :name => enactor.name,
                  :roll => roll,
                  :dice => FS3Skills.print_dice(die_result),
                  :success => success_title
                )
                FS3Skills.emit_results message, client, enactor_room, false
            end
          else 
            client.emit_failure t('custom.not_spell')
          end
            #Emit Shit for debugging
            # client.emit "#{enactor.combatant.armor_name}"
            
            # client.emit "#{name}: #{desc}, #{weapon}/#{weapon_specials}, #{armor}/#{armor_specials}, Mods: #{lethal_mod}, #{attack_mod}, #{defense_mod}. Roll: #{roll}"
        end
      # end

        
    end
  end
end
